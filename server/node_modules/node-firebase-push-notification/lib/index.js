"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FirebaseAdmin = void 0;
const firebase_admin_1 = __importStar(require("firebase-admin"));
class FirebaseAdmin {
    constructor(firebaseAdmin) {
        this.admin = firebaseAdmin;
    }
    static initialize(options) {
        if (this.instance)
            throw new Error('Instance already initialized.');
        const { projectId, privateKey, clientEmail, databaseURL } = options;
        const serviceAccount = {
            projectId,
            privateKey,
            clientEmail,
        };
        const adminConfig = {
            credential: firebase_admin_1.credential.cert(serviceAccount),
            databaseURL,
        };
        firebase_admin_1.default.initializeApp(adminConfig);
        this.instance = new FirebaseAdmin(firebase_admin_1.default);
    }
    static getInstance() {
        if (!this.instance)
            throw new Error('Instance needs to be initialized first.');
        return this.instance;
    }
    sendMulticastMessaging(tokens, title, body, data) {
        return this.admin.messaging().sendMulticast({
            data,
            notification: { title, body },
            tokens,
        });
    }
}
exports.FirebaseAdmin = FirebaseAdmin;
